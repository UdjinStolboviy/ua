{"version":3,"sources":["components/CryptoTable/index.tsx","components/ConverterBlock/index.tsx","styles.ts","App.tsx","stores/converterStore.ts","stores/currenciesStore.ts","stores/index.ts","index.tsx"],"names":["CryptoTable","inject","observer","classes","currenciesStore","converterStore","items","getItems","diffObj","getDiffObj","React","useEffect","fetchCoins","setInterval","TableContainer","component","Paper","Table","className","table","aria-label","TableHead","TableRow","TableCell","align","TableBody","length","map","coin","onClick","setSelectedCoin","onClickRow","rowCurrency","hover","key","name","currencyIcon","src","imageUrl","alt","fullName","price","volume24Hour","reducer","state","action","type","payload","value","String","Number","inPrice","outPrice","in","out","ConverterBlock","useState","selectedOutCoin","setSelectedOutCoin","coins","getSelectedCoin","find","obj","useReducer","value1","value2","dispatch","paper","cryptoInputBox","FormControl","currencyInput","TextField","onChange","e","target","label","currencyType","InputLabel","shrink","id","Select","MenuItem","useStyles","makeStyles","theme","createStyles","root","padding","spacing","textAlign","color","palette","text","secondary","marginBottom","marginTop","minWidth","marginRight","width","height","borderRadius","redColumn","backgroundColor","greenColumn","cursor","App","Container","maxWidth","Grid","container","item","xs","ConverterStore","this","selectedCoin","observable","computed","CurrenciesStore","arr1","arr2","filter","index","diffCurrencies","reduce","initObj","newObj","o","oldObj","itemObj","setTimeout","axios","get","then","data","ccy","base_ccy","buy","parseInt","sale","setItems","stores","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f59a572b.chunk.js","sourcesContent":["import React from 'react';\nimport { observer, inject } from 'mobx-react';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport { TCoin, TCoinDiff } from '../../types';\nimport ConverterStore from '../../stores/converterStore';\nimport CurrenciesStore from '../../stores/currenciesStore';\n\ntype ICryptoTable = {\n  classes: any;\n  currenciesStore?: CurrenciesStore;\n  converterStore?: ConverterStore;\n};\n\nconst CryptoTable = inject(\n  'currenciesStore',\n  'converterStore',\n)(\n  observer(({ classes, currenciesStore, converterStore }: ICryptoTable) => {\n    const items: TCoin[] = currenciesStore!.getItems;\n    const diffObj: TCoinDiff = currenciesStore!.getDiffObj;\n\n    React.useEffect(() => {\n      if (currenciesStore) {\n        currenciesStore.fetchCoins();\n        setInterval(() => {\n          currenciesStore.fetchCoins();\n        }, 30 * 1000);\n      }\n    }, []);\n\n    const onClickRow = (coin: TCoin) => {\n      if (converterStore) {\n        converterStore.setSelectedCoin(coin);\n      }\n    };\n\n    return (\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell></TableCell>\n              <TableCell align=\"left\">Name</TableCell>\n              <TableCell align=\"left\">UAH</TableCell>\n              <TableCell align=\"left\">Price bay</TableCell>\n              <TableCell align=\"left\">Price sell</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {!items.length\n              ? 'Загрузка...'\n              : items.map((coin: TCoin) => (\n                  <TableRow\n                    onClick={() => onClickRow(coin)}\n                    className={classes.rowCurrency}\n                    hover\n                    key={coin.name}>\n                    <TableCell>\n                      <img className={classes.currencyIcon} src={coin.imageUrl} alt=\"img\" />\n                    </TableCell>\n                    <TableCell align=\"left\">{coin.name}</TableCell>\n                    <TableCell align=\"left\">{coin.fullName}</TableCell>\n                    <TableCell\n                      className={diffObj[coin.name] && classes[`${diffObj[coin.name]}Column`]}\n                      align=\"left\">\n                      ${coin.price}\n                    </TableCell>\n                    <TableCell align=\"left\">${coin.volume24Hour}</TableCell>\n                  </TableRow>\n                ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    );\n  }),\n);\n\nexport default CryptoTable;\n","import React from 'react';\nimport { observer, inject } from 'mobx-react';\nimport Paper from '@material-ui/core/Paper';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport CurrenciesStore from '../../stores/currenciesStore';\nimport ConverterStore from '../../stores/converterStore';\nimport { TSelectedCoin } from '../../types';\n\ntype IConverterBlock = {\n  classes: any;\n  currenciesStore?: CurrenciesStore;\n  converterStore?: ConverterStore;\n};\n\ntype TReducerState = {\n  value1: string;\n  value2: string;\n  inPrice: number;\n  outPrice: number;\n};\n\ntype TSetValue1Action = {\n  type: string;\n  payload: string;\n};\n\ntype TAction = TSetValue1Action;\n\nfunction reducer(state: TReducerState, action: any): TReducerState {\n  switch (action.type) {\n    case 'SET_VALUE':\n      return {\n        ...state,\n        [action.payload.name]: action.payload.value,\n        value2: String((Number(action.payload.value) * state.inPrice) / state.outPrice),\n      };\n\n    case 'SET_PRICES':\n      return {\n        ...state,\n        inPrice: action.payload.in,\n        outPrice: action.payload.out,\n      };\n\n    default:\n      return state;\n  }\n}\n\nconst ConverterBlock: React.FC<IConverterBlock> = inject(\n  'currenciesStore',\n  'converterStore',\n)(\n  observer(({ classes, currenciesStore, converterStore }) => {\n    const [selectedOutCoin, setSelectedOutCoin] = React.useState('USD');\n    const coins: string[] = currenciesStore!.getItems.map(coin => coin.name);\n    const inPrice = Number(converterStore?.getSelectedCoin.price) || 0;\n    const outPrice =\n      Number(currenciesStore!.getItems.find(obj => obj.name === selectedOutCoin)?.price) || 0;\n    const [state, dispatch] = React.useReducer(reducer, {\n      value1: '',\n      value2: '',\n      inPrice,\n      outPrice,\n    });\n\n    React.useEffect(() => {\n      dispatch({\n        type: 'SET_PRICES',\n        payload: {\n          in: inPrice,\n          out: outPrice,\n        },\n      });\n    }, [inPrice, outPrice]);\n\n    const onUpdateField = (name: string, value: string) => {\n      dispatch({\n        type: 'SET_VALUE',\n        payload: {\n          name,\n          value,\n        },\n      });\n    };\n\n    return (\n      <Paper className={classes.paper}>\n        <div className={classes.cryptoInputBox}>\n          <FormControl className={classes.currencyInput}>\n            <TextField\n              type=\"number\"\n              value={state.value1}\n              onChange={(e: any) => onUpdateField('value1', e.target.value)}\n              label=\"Сумма\"\n            />\n          </FormControl>\n          <FormControl className={classes.currencyType}>\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n              Валюта\n            </InputLabel>\n            <Select value={converterStore?.getSelectedCoin.name || ''}>\n              {coins.map(name => (\n                <MenuItem value={name}>{name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className={classes.cryptoInputBox}>\n          <FormControl className={classes.currencyInput}>\n            <TextField type=\"number\" value={state.value2} label=\"Сумма\" />\n          </FormControl>\n          <FormControl className={classes.currencyType}>\n            <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n              Валюта\n            </InputLabel>\n            <Select\n              onChange={e => setSelectedOutCoin(e.target.value as string)}\n              value={selectedOutCoin}>\n              <MenuItem value=\"USD\">USD</MenuItem>\n              {coins.map(name => (\n                <MenuItem value={name}>{name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n      </Paper>\n    );\n  }),\n);\n\nexport default ConverterBlock;\n","import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      padding: theme.spacing(10),\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: 'center',\n      color: theme.palette.text.secondary,\n    },\n    cryptoInputBox: {\n      marginBottom: 20,\n      marginTop: 20,\n    },\n    currencyInput: {\n      minWidth: 'calc(70% - 10px)',\n      marginRight: 10,\n    },\n    currencyType: {\n      minWidth: '30%',\n    },\n    table: {\n      minWidth: 650,\n    },\n    currencyIcon: {\n      width: 18,\n      height: 18,\n      borderRadius: 30,\n    },\n    redColumn: {\n      backgroundColor: '#d8ffc4',\n    },\n    greenColumn: {\n      backgroundColor: '#ffdada',\n    },\n    rowCurrency: {\n      cursor: 'pointer',\n    },\n  }),\n);\n\nexport default useStyles;\n","import React from 'react';\nimport Container from '@material-ui/core/Container';\nimport Grid from '@material-ui/core/Grid';\n\nimport { CryptoTable, ConverterBlock } from './components';\nimport useStyles from './styles';\n\nfunction App() {\n  const classes: any = useStyles();\n\n  return (\n    <Container className={classes.root} maxWidth=\"lg\">\n      <Grid container spacing={3}>\n        <Grid item xs={8}>\n          <CryptoTable classes={classes} />\n        </Grid>\n        <Grid item xs={4}>\n          <ConverterBlock classes={classes} />\n        </Grid>\n      </Grid>\n    </Container>\n  );\n}\n\nexport default App;\n","import { observable, computed, action } from 'mobx';\nimport { TCoin, TSelectedCoin } from '../types';\n\nclass ConverterStore {\n  @observable private selectedCoin: TSelectedCoin = {\n    name: '',\n    price: 0,\n  };\n\n  @computed\n  get getSelectedCoin() {\n    return this.selectedCoin;\n  }\n\n  @action\n  setSelectedCoin(coin: TCoin) {\n    this.selectedCoin = {\n      name: coin.name,\n      price: coin.price,\n    };\n  }\n}\n\nexport default ConverterStore;\n","import axios from 'axios';\nimport { observable, computed, action } from 'mobx';\nimport { TCoin, TCoinDiff } from '../types';\n\nimport stores from '../stores';\n\nclass CurrenciesStore {\n  @observable private items: TCoin[] = [];\n  @observable private diffObj: TCoinDiff = {};\n\n  @computed\n  get getItems() {\n    return this.items;\n  }\n\n  @computed\n  get getDiffObj() {\n    return this.diffObj;\n  }\n\n  @action\n  setItems = (items: TCoin[]): void => {\n    this.diffObj = this.diffCurrencies(this.items, items).reduce(\n      (initObj: TCoinDiff, obj: TCoin) => {\n        const newObj: TCoin = items.find(o => o.name === obj.name)!;\n        const oldObj: TCoin = this.items.find(itemObj => itemObj.name === newObj.name)!;\n        const color: string =\n          newObj.price === oldObj.price ? '' : newObj.price > oldObj.price ? 'green' : 'red';\n\n        initObj[newObj.name] = color;\n\n        return initObj;\n      },\n      {},\n    );\n    this.items = items;\n    setTimeout(() => {\n      this.diffObj = {};\n    }, 10000);\n  };\n\n  @action\n  fetchCoins = () => {\n    axios\n      .get('https://api.privatbank.ua/p24api/pubinfo?exchange&json&coursid=11')\n      .then(({ data }) => {\n        const coins: TCoin[] = data.map((coin: any) => {\n          const obj: TCoin = {\n            name: coin.ccy,\n            fullName: coin.base_ccy,\n            imageUrl: \"not\",\n            price: coin.buy,\n            volume24Hour: parseInt(coin.sale),\n          };\n          return obj;\n        });\n        this.setItems(coins);\n        stores.converterStore.setSelectedCoin(coins[0]);\n      });\n  };\n\n  diffCurrencies(arr1: TCoin[], arr2: TCoin[]) {\n    return arr1.filter((obj, index) => {\n      if (obj.price !== arr2[index].price) {\n        return true;\n      }\n      return false;\n    });\n  }\n}\n\nexport default CurrenciesStore;\n","import ConverterStore from './converterStore';\nimport CurrenciesStore from './currenciesStore';\n\nconst stores = {\n  converterStore: new ConverterStore(),\n  currenciesStore: new CurrenciesStore(),\n};\n\nexport default stores;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'mobx-react';\n\nimport stores from './stores';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider {...stores}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}